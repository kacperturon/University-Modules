/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import main.NormalDistributionPreferences;
import main.Master;

/**
 *
 * @author Kacper
 */
public class PreferencesUI extends javax.swing.JFrame {

    /**
     * Creates new form Preferences
     */
    public PreferencesUI() {
        initComponents();
        //Set the values in the preferences UI to the saved ones in register
        if (NormalDistributionPreferences.getIntegrationType().equals("TrapeziumRule")) {
            trapeziumRuleRadioButton.setSelected(true); //If trapezium is set in register, select trapezium
            accuracyProgressBar.setMaximum(1119); //Set maximum value for the progress bar as the optimal value for this type of integration
        } else if (NormalDistributionPreferences.getIntegrationType().equals("MidPointRule")) {
            midPointRuleRadioButton.setSelected(true);
            accuracyProgressBar.setMaximum(1905);
        } else {
            simpsonsRuleRadioButton.setSelected(true);
            accuracyProgressBar.setMaximum(32);
        }
        if (NormalDistributionPreferences.getAccuracyAuto() == true) { //If accuracy was set to auto check the checkbox and make the accuracy input not editable
            accuracyCheckBox.setSelected(true);
            accuracyInput.setEditable(false);
            accuracyProgressBar.setValue(accuracyProgressBar.getMaximum()); //set progress value always to maximum if user chose auto accuracy option
        } else { //If accuracy wasn't set to auto make the input editable and checkbox not checked
            accuracyCheckBox.setSelected(false);
            accuracyInput.setEditable(true);
            accuracyInput.setText(Integer.toString(NormalDistributionPreferences.getAccuracy()));
            accuracyProgressBar.setValue(NormalDistributionPreferences.getAccuracy());
        }
        updateProgressBarHue(); //Update the colour of progress bar depending on the value inside
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numericalIntegrationTypeGroup = new javax.swing.ButtonGroup();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        trapeziumRuleRadioButton = new javax.swing.JRadioButton();
        midPointRuleRadioButton = new javax.swing.JRadioButton();
        simpsonsRuleRadioButton = new javax.swing.JRadioButton();
        numericalIntegrationTypeLabel = new javax.swing.JLabel();
        accuracyLabel = new javax.swing.JLabel();
        accuracyCheckBox = new javax.swing.JCheckBox();
        accuracyInput = new javax.swing.JTextField();
        warningLabel = new javax.swing.JLabel();
        accuracyProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preferences");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/gear.png")));
        setResizable(false);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        numericalIntegrationTypeGroup.add(trapeziumRuleRadioButton);
        trapeziumRuleRadioButton.setText("Trapezium rule");
        trapeziumRuleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trapeziumRuleRadioButtonActionPerformed(evt);
            }
        });

        numericalIntegrationTypeGroup.add(midPointRuleRadioButton);
        midPointRuleRadioButton.setText("Mid-point rule");
        midPointRuleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midPointRuleRadioButtonActionPerformed(evt);
            }
        });

        numericalIntegrationTypeGroup.add(simpsonsRuleRadioButton);
        simpsonsRuleRadioButton.setText("Simpson's rule");
        simpsonsRuleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpsonsRuleRadioButtonActionPerformed(evt);
            }
        });

        numericalIntegrationTypeLabel.setText("Numerical Integration type:");

        accuracyLabel.setText("Accuracy:");

        accuracyCheckBox.setText("auto");
        accuracyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accuracyCheckBoxActionPerformed(evt);
            }
        });

        accuracyInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        accuracyInput.getDocument().addDocumentListener(new DocumentListener(){
            public void changedUpdate(DocumentEvent e){updateProgressBar();}
            public void removeUpdate(DocumentEvent e){updateProgressBar();}
            public void insertUpdate(DocumentEvent e){updateProgressBar();}
        });

        warningLabel.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        warningLabel.setForeground(new java.awt.Color(255, 0, 51));
        warningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        accuracyProgressBar.setForeground(new java.awt.Color(51, 51, 255));
        accuracyProgressBar.setOrientation(1);
        accuracyProgressBar.setToolTipText("Accuracy");
        accuracyProgressBar.setValue(50);
        accuracyProgressBar.setString("");
        accuracyProgressBar.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(midPointRuleRadioButton)
                            .addComponent(trapeziumRuleRadioButton)
                            .addComponent(simpsonsRuleRadioButton)
                            .addComponent(numericalIntegrationTypeLabel)
                            .addComponent(saveButton))
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(accuracyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(accuracyCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(accuracyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(accuracyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(numericalIntegrationTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(trapeziumRuleRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(midPointRuleRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simpsonsRuleRadioButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accuracyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(accuracyCheckBox)
                            .addComponent(accuracyLabel))
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accuracyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        dispose(); //Close the window on cancel
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void accuracyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accuracyCheckBoxActionPerformed
        if (accuracyCheckBox.isSelected()) { 
            accuracyInput.setEditable(false); //Make the input non-editable
            accuracyInput.setText(""); //Clear the input
            accuracyProgressBar.setValue(accuracyProgressBar.getMaximum()); //Set the value of progress bar to maximum
            updateProgressBarHue(); //Update colour of the progress bar
        } else {
            accuracyProgressBar.setValue(0);
            accuracyInput.setEditable(true); //Set the input to editable
            updateProgressBarHue(); //Update the colour of progress bar
        }

    }//GEN-LAST:event_accuracyCheckBoxActionPerformed
    
    private void updateProgressBar() {
        try {
            accuracyProgressBar.setValue(Integer.parseInt(accuracyInput.getText())); //Sets the value of progress bar to whatever user inputted
            updateProgressBarHue(); //Update the colour of progress bar
        } catch (Exception e) {

        }
    }

    private void updateProgressBarHue() { //Changes colour of progress bar depending on the value different colours for below 25% then 25%-50% 50%-75% 75%-99% 100%
        if (accuracyProgressBar.getValue() >= accuracyProgressBar.getMaximum()) {
            accuracyProgressBar.setForeground(new Color(51, 255, 102));
        } else if (accuracyProgressBar.getValue() >= accuracyProgressBar.getMaximum() * 0.75) {
            accuracyProgressBar.setForeground(new Color(102, 255, 51));
        } else if (accuracyProgressBar.getValue() >= accuracyProgressBar.getMaximum() * 0.5) {
            accuracyProgressBar.setForeground(new Color(204, 255, 51));
        } else if (accuracyProgressBar.getValue() >= accuracyProgressBar.getMaximum() * 0.25) {
            accuracyProgressBar.setForeground(new Color(255, 204, 51));
        } else {
            accuracyProgressBar.setForeground(new Color(255, 102, 51));
        }
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        warningLabel.setText(""); //Reset the warning label
        boolean validated = true;
        if (!accuracyCheckBox.isSelected()) { //Check if accuracy value is valid
            int accuracy = 0;
            try {
                accuracy = Integer.parseInt(accuracyInput.getText());
            } catch (Exception e) {
                warningLabel.setText("Accuracy has to be an integer larger than 0.");
                accuracyInput.setText("");
                validated = false;
            }

            if (accuracy <= 0 && validated) {
                warningLabel.setText("Accuracy has to be larger than 0.");
                validated = false;
            }

            if (simpsonsRuleRadioButton.isSelected() && accuracy % 2 != 0 && validated) {
                warningLabel.setText("<html>Accuracy for Simpson's rule<br> has to be larger than 0 and even.</html>");
                validated = false;
            }
        }
        if (validated) { //If accuracy value is valid save values in the register
            if (trapeziumRuleRadioButton.isSelected()) {
                NormalDistributionPreferences.setIntegrationType("TrapeziumRule");

            } else if (midPointRuleRadioButton.isSelected()) {
                NormalDistributionPreferences.setIntegrationType("MidPointRule");

            } else {
                NormalDistributionPreferences.setIntegrationType("SimpsonsRule");
            }
            NormalDistributionPreferences.setAccuracyAuto(accuracyCheckBox.isSelected());

            if (!accuracyCheckBox.isSelected()) {
                NormalDistributionPreferences.setAccuracy(Integer.parseInt(accuracyInput.getText()));
            }
            Master.getNdUI().getNormalDistributionTableJScrollPane().refreshTable(); //Update ZTable with new values
            Master.getNdUI().updateArea(); //Update area 
            Master.getNdUI().getZLowerBoundInput().setText(""); //Cl;ear Z table range inputs 
            Master.getNdUI().getZUpperBoundInput().setText("");
            dispose(); //Close the preferences window
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void trapeziumRuleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trapeziumRuleRadioButtonActionPerformed
        accuracyProgressBar.setMaximum(1119); //Set the maximum value of the progress bar to optimal value for this integration type
        if (accuracyCheckBox.isSelected()) { //If accuracy is set to auto set the value of progress bar to maximum
            accuracyProgressBar.setValue(accuracyProgressBar.getMaximum());
        }
        updateProgressBarHue(); //Update the colour of progress bar
    }//GEN-LAST:event_trapeziumRuleRadioButtonActionPerformed

    private void midPointRuleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midPointRuleRadioButtonActionPerformed
        accuracyProgressBar.setMaximum(1905); //Set the maximum value of the progress bar to optimal value for this integration type
        if (accuracyCheckBox.isSelected()) { //If accuracy is set to auto set the value of progress bar to maximum
            accuracyProgressBar.setValue(accuracyProgressBar.getMaximum());
        }
        updateProgressBarHue(); //Update the colour of progress bar
    }//GEN-LAST:event_midPointRuleRadioButtonActionPerformed

    private void simpsonsRuleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpsonsRuleRadioButtonActionPerformed
        accuracyProgressBar.setMaximum(32); //Set the maximum value of the progress bar to optimal value for this integration type
        if (accuracyCheckBox.isSelected()) { //If accuracy is set to auto set the value of progress bar to maximum
            accuracyProgressBar.setValue(accuracyProgressBar.getMaximum());
        }
        updateProgressBarHue(); //Update the colour of progress bar

    }//GEN-LAST:event_simpsonsRuleRadioButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox accuracyCheckBox;
    private javax.swing.JTextField accuracyInput;
    private javax.swing.JLabel accuracyLabel;
    private javax.swing.JProgressBar accuracyProgressBar;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton midPointRuleRadioButton;
    private javax.swing.ButtonGroup numericalIntegrationTypeGroup;
    private javax.swing.JLabel numericalIntegrationTypeLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JRadioButton simpsonsRuleRadioButton;
    private javax.swing.JRadioButton trapeziumRuleRadioButton;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
